<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术研究 on Boxcounter&#39;s blog</title>
    <link>http://boxcounter.com/tags/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/</link>
    <description>Recent content in 技术研究 on Boxcounter&#39;s blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Sep 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://boxcounter.com/tags/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>read committed与statement-based replication</title>
      <link>http://boxcounter.com/posts/2017-09-15-read-commited-statement-based-replication/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2017-09-15-read-commited-statement-based-replication/</guid>
      <description>&lt;h1 id=&#34;疑问&#34;&gt;疑问&lt;/h1&gt;&#xA;&lt;p&gt;在MySQL的&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/innodb-transaction-isolation-levels.html&#34;&gt;Transaction Isolation Level&lt;/a&gt;文档里读到这么一句话：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;If you use READ COMMITTED, you must use row-based binary logging.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;这引发了我的好奇心：为什么呢？READ COMMITTED和statement-based replication会引发数据不一致吗？为什么会不一致呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swoole连接超时分析</title>
      <link>http://boxcounter.com/posts/2017-04-24-swoole%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2017-04-24-swoole%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;一简述&#34;&gt;一、简述&lt;/h1&gt;&#xA;&lt;p&gt;我们的产品中使用&lt;a href=&#34;http://www.swoole.com/&#34;&gt;Swoole&lt;/a&gt;来构建长连接服务，用于C/S之间的实时数据交互。同时也编写了一个监控程序monitor来定时检查长连接服务的可用性。结构是这样的：&lt;/p&gt;&#xA;&#xA;&#xA;&lt;img src=&#34;http://boxcounter.com/images/2017-04-24/1.png&#34; width=&#34;480&#34;/&gt;&#xA;&#xA;&#xA;&lt;p&gt;不知从什么时候起，每天都会收到几封报警邮件，关键信息是这样的：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;check_websocket: failed... err_code(11)...err_info: Resource temporarily unavailable&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为最近团队忙的很，这个错误也没有影响业务的可用性，所以一直没管。等到前两天我有闲了，就尝试着分析、处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>64位系统的对齐问题</title>
      <link>http://boxcounter.com/posts/2012-10-25-64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2012-10-25-64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;今天在技术群里有位童鞋问了一个问题：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;On 64-bit Windows, if a data structure is misaligned, routines that manipulate the structure, such as RtlCopyMemory and memcpy, will not fault. Instead, they will raise an exception. For example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#099&#34;&gt;#pragma pack (1) &lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// also set by /Zp switch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Buffer&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ULONG size;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;ptr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;SetPointer&lt;/span&gt;(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;p) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Buffer&lt;/span&gt; s;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     s.ptr &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; p;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* will cause alignment fault */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You could use the UNALIGNED macro to fix this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ZeroMemory与类对象</title>
      <link>http://boxcounter.com/posts/2012-09-20-zeromemory%E4%B8%8E%E7%B1%BB%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2012-09-20-zeromemory%E4%B8%8E%E7%B1%BB%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;今天看到一段同事的代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ZeroMemory(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;m_PacketInfo, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;sizeof&lt;/span&gt;(packet_info));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;packet_info&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string m_strModule;                 &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//模块&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    string m_strProtocol;               &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//协议&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    string m_strClientHostIP;           &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//客户端IP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    string m_strClientHostPort;         &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;//客户端端口&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;按照我的经验，这种对类对象进行ZeroMemory或者memset的代码会导致程序崩掉。因为会覆盖掉类对象中的关键域，比如虚表。但是同事在vs2005中这样做却很正常。让我很奇怪，于是花了点时间分析了下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于STATUS_INVALID_DEVICE_OBJECT_PARAMETER和STATUS_MOUNT_POINT_NOT_RESOLVED</title>
      <link>http://boxcounter.com/posts/2012-05-20-%E5%85%B3%E4%BA%8Estatus_invalid_device_object_parameter%E5%92%8Cstatus_mount_point_not_resolved/</link>
      <pubDate>Sun, 20 May 2012 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2012-05-20-%E5%85%B3%E4%BA%8Estatus_invalid_device_object_parameter%E5%92%8Cstatus_mount_point_not_resolved/</guid>
      <description>&lt;p&gt;　　很久之前，我写了篇&lt;a href=&#34;http://www.boxcounter.com/technique/2012-05-19-status_invalid_device_object_parameter/&#34;&gt;关于STATUS_INVALID_DEVICE_OBJECT_PARAMETER的blog&lt;/a&gt;，里面提到使用STATUS_REPARSE的FsFilter（后简称为R-FsFilter）对上层FsFilter造成的恶劣干扰。&lt;/p&gt;&#xA;&lt;p&gt;　　这两天看Alex Carp的文章，发现事情貌似有转机。具体参考他的&lt;a href=&#34;http://fsfilters.blogspot.com/2012/02/reparsing-to-different-volume-in-win7.html&#34;&gt;Reparsing to a Different Volume in Win7 and Win8&lt;/a&gt;（需要爬墙）。&lt;/p&gt;&#xA;&lt;p&gt;　　我总结一下：&#xA;　　目前的win8提供了一种新的ECP和相应的数据结构，保证在返回STATUS_MOUNT_POINT_NOT_RESOLVED的时候开发者可以获得目标FO的FLT_FILE_NAME_INFORMATION和FLT_INSTANCE。&#xA;　　用我那篇blog的原型就是，当驱动A调用FltCreateFile失败后（Alex的文章里只提到了STATUS_MOUNT_POINT_NOT_RESOLVED，但我猜测对STATUS_INVALID_DEVICE_OBJECT_PARAMETER应该也是适用的，我还没有动手测试，只是看IopCheckTopDeviceHint的实现做出的猜测），可以从ECP中获取到本次打开操作的目标FO的FLT_FILE_NAME_INFORMATION和FLT_INSTANCE，然后再次FltCreateFile就可以了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>有关STATUS_INVALID_DEVICE_OBJECT_PARAMETER</title>
      <link>http://boxcounter.com/posts/2012-05-19-status_invalid_device_object_parameter/</link>
      <pubDate>Sat, 19 May 2012 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2012-05-19-status_invalid_device_object_parameter/</guid>
      <description>&lt;p&gt;这两天遇到一个问题，记录在这里。&#xA;我有两个FS过滤驱动，这里称它们为 A 和 B，A 在 B 之上，其中 B 是个重定向驱动。下面是问题描述：&#xA;A 调用 FltCreateFile 打开 C: 中的某个文件，B收到这个请求后，指定这个请求重定向到 D:，结果 A收到了错误码 STATUS_INVALID_DEVICE_OBJECT_PARAMETER。 挂上 WRK 调试，发现整个调用栈是这样：&lt;/p&gt;</description>
    </item>
    <item>
      <title>TEB KPCR GS in x64</title>
      <link>http://boxcounter.com/posts/2012-02-08-teb-kpcr-gs-in-x64/</link>
      <pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2012-02-08-teb-kpcr-gs-in-x64/</guid>
      <description>&lt;p&gt;在x86中，如果折腾TEB或者KPCR，可能需要处理fs:[0x???]这样的地址，在x86中，咱们可以通过dg命令来手动查看：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;kd&amp;gt; dg @fs&#xA;                                  P Si Gr Pr Lo&#xA;Sel    Base     Limit     Type    l ze an es ng Flags&#xA;---- -------- -------- ---------- - -- -- -- -- --------&#xA;0030 ffdff000 00001fff Data RW Ac 0 Bg Pg P  Nl 00000c93&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;ffdff000+0x???就是要找的地址了。&#xA;当然，也可以从GDTR开始从头完全手动找，不过要麻烦一些。&lt;/p&gt;</description>
    </item>
    <item>
      <title>无锁数组</title>
      <link>http://boxcounter.com/posts/2012-01-15-%E6%97%A0%E9%94%81%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 15 Jan 2012 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2012-01-15-%E6%97%A0%E9%94%81%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;p&gt;项目里有一个地方可能要去掉用于链表的锁，但是又得保证读写互斥。于是琢磨了一个土办法：&#xA;（琢磨时的目标是用于异步发送日志，即多个日志存储者，一个发送者，接收者在另一个进程不用管它）&lt;/p&gt;</description>
    </item>
    <item>
      <title>SEH分析笔记（X64篇）</title>
      <link>http://boxcounter.com/posts/2011-11-04-seh-x64/</link>
      <pubDate>Fri, 04 Nov 2011 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2011-11-04-seh-x64/</guid>
      <description>&lt;p&gt;2015-07-25，注：因为排版过于复杂繁琐，目前仅提供html文件，请谅解。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/boxcounter/boxcounter.github.io/raw/master/attachments/SEH%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%EF%BC%88x64%E7%AF%87%EF%BC%89_v1.0.0.zip&#34;&gt;SEH分析笔记（x64篇）_v1.0.0.zip&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于完成例程（Completion Routine）</title>
      <link>http://boxcounter.com/posts/2011-10-26-%E5%85%B3%E4%BA%8E%E5%AE%8C%E6%88%90%E4%BE%8B%E7%A8%8Bcompletion-routine/</link>
      <pubDate>Wed, 26 Oct 2011 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2011-10-26-%E5%85%B3%E4%BA%8E%E5%AE%8C%E6%88%90%E4%BE%8B%E7%A8%8Bcompletion-routine/</guid>
      <description>&lt;p&gt;通常使用完成例程有这么三步：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;调用IoCopyCurrentIrpStackLocationToNext(&amp;hellip;)函数，把当前的IRP栈数据复制一份到下一层。&lt;/li&gt;&#xA;&lt;li&gt;调用IoSetCompletionRoutine(&amp;hellip;)函数，为IRP设置完成例程。&lt;/li&gt;&#xA;&lt;li&gt;调用IoCallDriver(&amp;hellip;)函数，把IRP传递到下一层驱动对象。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;DDK对使用完成例程还有如下要求：&lt;/p&gt;</description>
    </item>
    <item>
      <title>卷的文件系统识别、卷的挂载以及路径解析</title>
      <link>http://boxcounter.com/posts/2011-10-25-%E5%8D%B7%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AF%86%E5%88%AB%E5%8D%B7%E7%9A%84%E6%8C%82%E8%BD%BD%E4%BB%A5%E5%8F%8A%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 25 Oct 2011 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2011-10-25-%E5%8D%B7%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AF%86%E5%88%AB%E5%8D%B7%E7%9A%84%E6%8C%82%E8%BD%BD%E4%BB%A5%E5%8F%8A%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;前段时间琢磨文件过滤驱动的时候碰到一个棘手的问题，当时挂上wrk内核分析，发现了问题的关键点。分析的过程中明显感觉自己对IoMgr、ObjMgr、Fsd、Volume这些组件的结构关系掌握得很烂，于是最近这几天专门又挂上wrk内核，一点一点的追踪。有了一点收获，记录在这里，备忘。顺便也许会给一些朋友一点点帮助。&lt;/p&gt;</description>
    </item>
    <item>
      <title>有关IoEnumerateRegisteredFiltersList</title>
      <link>http://boxcounter.com/posts/2011-10-25-%E6%9C%89%E5%85%B3ioenumerateregisteredfilterslist/</link>
      <pubDate>Tue, 25 Oct 2011 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2011-10-25-%E6%9C%89%E5%85%B3ioenumerateregisteredfilterslist/</guid>
      <description>&lt;p&gt;有关于IoEnumerateRegisteredFiltersList&#xA;昨天逆一个驱动的时候发现静态分析出来的逻辑跟动态调试的逻辑不一致，继续跟下去，发现分歧处在IoEnumerateRegisteredFiltersList函数，原型如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>SEH分析笔记（X86篇）</title>
      <link>http://boxcounter.com/posts/2011-10-19-seh-x86/</link>
      <pubDate>Wed, 19 Oct 2011 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2011-10-19-seh-x86/</guid>
      <description>&lt;p&gt;v1.0.2&lt;/p&gt;&#xA;&lt;p&gt;2015-07-25，注：因为排版过于复杂繁琐，目前仅提供html文件，请谅解。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/boxcounter/boxcounter.github.io/raw/master/attachments/SEH%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0%EF%BC%88x86%E7%AF%87%EF%BC%89_v1.0.2.zip&#34;&gt;SEH分析笔记（x86篇）_v1.0.2.zip&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>驱动中获取进程完整路径名</title>
      <link>http://boxcounter.com/posts/2009-07-23-%E9%A9%B1%E5%8A%A8%E4%B8%AD%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8B%E5%AE%8C%E6%95%B4%E8%B7%AF%E5%BE%84%E5%90%8D/</link>
      <pubDate>Thu, 23 Jul 2009 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2009-07-23-%E9%A9%B1%E5%8A%A8%E4%B8%AD%E8%8E%B7%E5%8F%96%E8%BF%9B%E7%A8%8B%E5%AE%8C%E6%95%B4%E8%B7%AF%E5%BE%84%E5%90%8D/</guid>
      <description>&lt;p&gt;在OSR上无意中看到一篇文章，关于获取进程完整路径的。贴过来，最后有一点小调整。&lt;/p&gt;&#xA;&lt;p&gt;原文地址：&lt;a href=&#34;http://www.osronline.com/article.cfm?id=472&#34;&gt;http://www.osronline.com/article.cfm?id=472&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Over the years developers have needed or wanted to know the name of the image executing in a given process. Traditionally, this was often done using PsGetProcessImageFile Name, which returns the contents of a field in the EPROCESS structure used by the Windows OS to maintain per-process state information.&lt;br&gt;&#xA;As we can see from the information in the local debugger session (See Figure 1) the process image file is little more than a field within the EPROCESS structure. Notice that the EPROCESS address is in EBP+8, making it the first - and only - parameter to this function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于将本层的IO_STACK_LOCATION拷贝到下一层的两种方法</title>
      <link>http://boxcounter.com/posts/2007-12-10-%E5%85%B3%E4%BA%8E%E5%B0%86%E6%9C%AC%E5%B1%82%E7%9A%84io_stack_location%E6%8B%B7%E8%B4%9D%E5%88%B0%E4%B8%8B%E4%B8%80%E5%B1%82%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 10 Dec 2007 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2007-12-10-%E5%85%B3%E4%BA%8E%E5%B0%86%E6%9C%AC%E5%B1%82%E7%9A%84io_stack_location%E6%8B%B7%E8%B4%9D%E5%88%B0%E4%B8%8B%E4%B8%80%E5%B1%82%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;两种方法：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;调用MS提供的标准方法IoCopyCurrentIrpStackLocationToNext(&amp;hellip;)&lt;/li&gt;&#xA;&lt;li&gt;方法二：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PIO_STACK_LOCATION IrpSp;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PIO_STACK_LOCATION NextIrpSp;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IrpSp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; IoGetCurrentIrpStackLocation(Irp);   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NextIrpSp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; IoGetNextIrpStackLocation(Irp);   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;NextIrpSp &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;IrpSp;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;IoCallDriver&lt;/span&gt;(NextDeviceObject, Irp);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;两种方法都挺常用。但是今天再看DDK中一篇OSR的分析文章里提到一个采用方法二可能会导致的一个很隐蔽的BUG：&lt;/p&gt;</description>
    </item>
    <item>
      <title>对&#39;CDO&#39;和&#39;FiDO&#39;的理解</title>
      <link>http://boxcounter.com/posts/2007-12-08-%E5%AF%B9cdo%E5%92%8Cfido%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sat, 08 Dec 2007 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2007-12-08-%E5%AF%B9cdo%E5%92%8Cfido%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;下面是我对于CDO、FiDO的理解，不一定正确，但是还是记录下来，以后学习清楚来再来修正。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&amp;lsquo;CDO&amp;rsquo;是提供给R3级进程和其它驱动程序的，可以理解为它是我们过滤驱动程序的外交官。负责接收来自R3进程和其它驱动的IO请求（&amp;lsquo;CDO&amp;rsquo;仅仅只负责接收，处理过程由&amp;rsquo;FiDO&amp;rsquo;完成）。&lt;/li&gt;&#xA;&lt;li&gt;&amp;lsquo;FiDO&amp;rsquo;提供真正Irp、FastIO处理函数，是我们的过滤驱动程序的功能核心。&lt;/li&gt;&#xA;&lt;li&gt;&amp;lsquo;CDO&amp;rsquo;不需要挂载到别的驱动上。而&amp;rsquo;FiDO&amp;rsquo;则根据需要挂载到目标对象上。&lt;/li&gt;&#xA;&lt;li&gt;一个过滤驱动程序的&amp;rsquo;CDO&amp;rsquo;最多只可以有1个，&amp;lsquo;FiDO&amp;rsquo;可以有多个。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
