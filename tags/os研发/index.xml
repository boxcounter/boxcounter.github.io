<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OS研发 on Boxcounter&#39;s blog</title>
    <link>http://boxcounter.com/tags/os%E7%A0%94%E5%8F%91/</link>
    <description>Recent content in OS研发 on Boxcounter&#39;s blog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 14 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://boxcounter.com/tags/os%E7%A0%94%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linux、osx下搭建操作系统开发环境 v1.1</title>
      <link>http://boxcounter.com/posts/2013-11-14-linuxosx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83_v1.1/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2013-11-14-linuxosx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83_v1.1/</guid>
      <description>&lt;h1 id=&#34;一前言&#34;&gt;一、前言&lt;/h1&gt;&#xA;&lt;p&gt;　　本文档记录的内容既适用于x86也适用于x64，只是对于后者有一些环境要求。&lt;br&gt;&#xA;　　之前开发使用的方法是：自己的引导代码+虚拟软盘。优点是搭建简单，所有代码都是自己编写，可控性强。最近想试试使用grub的引导功能，于是花了些时间琢磨。搜出来的相​关资料有不少，但是要么是grub1的，要么太过零散，要么描述太过简略。总之，没有一篇文章详细的讲述整个配置过程。所以我就在搭建的过程中顺手整理了这么一篇完整的、​完全从零开始的方法，其中每一步都有较丰富的说明。&lt;br&gt;&#xA;　　另外，本文档介绍的方法适用于osx和linux，实际上整个过程中大部分必须使用到linux。也就是说如果要按照本文档来搭建开发环境，linuxer只需要使用自己​的linux系统就行，而osxer还得备一套linux系统（比如虚拟机）。使用linux的主要原因是我选择了ext2作为文件系统，而osx上貌似只有读写ext2​的fuse-ext2，没有用于创建ext2分区的fdisk等工具（如果同好有osx的ext2创建工具推荐，劳烦分享给我(ns.boxcounter[at]gmail.com)吧，不胜感激）。如果改用fat32就没有这个烦恼，整个过程都可以在osx下完成，因为osx的fdisk就可以创建fat32分区。&lt;/p&gt;</description>
    </item>
    <item>
      <title>osx下搭建操作系统开发环境之64位交叉开发工具集（gcc&#43;gdb）v1.0</title>
      <link>http://boxcounter.com/posts/2013-11-08-osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B64%E4%BD%8D%E4%BA%A4%E5%8F%89%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%9B%86gcc&#43;gdbv1.0/</link>
      <pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2013-11-08-osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B64%E4%BD%8D%E4%BA%A4%E5%8F%89%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%9B%86gcc&#43;gdbv1.0/</guid>
      <description>&lt;h1 id=&#34;一前言&#34;&gt;一、前言&lt;/h1&gt;&#xA;&lt;p&gt;　　《&lt;a href=&#34;http://boxcounter.com/2013/11/04/osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B32%E4%BD%8D%E4%BA%A4%E5%8F%89%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%9B%86%EF%BC%88gcc+gdb%EF%BC%89v1.1&#34;&gt;osx下搭建操作系统开发环境之32位交叉开发工具集(gcc+gdb)&lt;/a&gt;》一文中讲解了32位交叉工具的构建。64位（专指x64，非IA64）的构建方法和32位基本相同。看过前文的朋友看本文会发现绝大多数内容都是一样的。没错，之所以不基于前文、只讲差异，是为了独立性，方便只关注x64构建方法的朋友。&lt;br&gt;&#xA;　　我的环境：osx 10.9&lt;/p&gt;&#xA;&lt;h1 id=&#34;二安装osx版的gcc&#34;&gt;二、安装osx版的gcc&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;brew install gcc48&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;　　推荐下载最新的稳定版gcc。&lt;/p&gt;&#xA;&lt;h1 id=&#34;三配置编译环境&#34;&gt;三、配置编译环境&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载gcc源码&lt;br&gt;&#xA;根据参考资料1的建议，最好使用最新的gcc来进行编译，被编译的源码也推荐使用一样版本的。也就是说，用gcc 4.8.2来编译gcc 4.8.2的源码。&lt;br&gt;&#xA;下载&lt;a href=&#34;http://ftp.gnu.org/gnu/gcc&#34;&gt;源码包&lt;/a&gt;并解压，得到的目录名称之为“$gcc-4.8.2”。&lt;/li&gt;&#xA;&lt;li&gt;下载gcc依赖项&lt;br&gt;&#xA;需要的依赖项有：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gnu.org/software/binutils/&#34;&gt;GNU Binutils&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://gmplib.org/&#34;&gt;GMP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.mpfr.org/&#34;&gt;MPFR&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://multiprecision.org/&#34;&gt;MPC&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;将它们都解压出来，把解压出来的b、c、d的目录都放到gcc源码目录下。都需要去掉版本号，比如解压出来的目录名为“mpc-1.0.1”，那么现在就是“$gcc-4.8.2/mpc”。a无需这么做，因为它需要单独编译，参考后续的步骤4。&lt;br&gt;&#xA;其中GMP源码包是lzip压缩格式，需要下载lzip工具解压（brew安装）。&#xA;3. 下载gdb源码&lt;br&gt;&#xA;下载&lt;a href=&#34;http://ftp.gnu.org/gnu/gdb&#34;&gt;源码包&lt;/a&gt;并解压，得到的目录名称之为“$gdb-7.6.1”。&#xA;4. 设置环境变量&lt;/p&gt;</description>
    </item>
    <item>
      <title>osx下搭建操作系统开发环境之构建bochs v1.0</title>
      <link>http://boxcounter.com/posts/2013-11-05-osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B%E6%9E%84%E5%BB%BAbochs_v1.0/</link>
      <pubDate>Tue, 05 Nov 2013 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2013-11-05-osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B%E6%9E%84%E5%BB%BAbochs_v1.0/</guid>
      <description>&lt;h1 id=&#34;一前言&#34;&gt;一、前言&lt;/h1&gt;&#xA;&lt;p&gt;　　我编译bochs的目的是为了启用gdb调试功能。bochs提供的调试器功能较简单，开发过程中还是gdb更趁手。本文记录的方法是我一点点尝试出来的，参考了网上一些零碎资料。整个过程虽然简单但是整体比较凌乱，特别是需要对bochs的官方源码包做好几处修改。目前不太想再花时间优化过程，能编译出来就好。如果有同好有更简单的方法，有劳和我分享一下吧。&lt;br&gt;&#xA;　　我的环境：osx 10.9，bochs 2.6.2、使用x11作为界面库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>osx下搭建操作系统开发环境之32位交叉开发工具集（gcc&#43;gdb）v1.1</title>
      <link>http://boxcounter.com/posts/2013-09-07-osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B32%E4%BD%8D%E4%BA%A4%E5%8F%89%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%9B%86gcc&#43;gdbv1.1/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      <guid>http://boxcounter.com/posts/2013-09-07-osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B32%E4%BD%8D%E4%BA%A4%E5%8F%89%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E9%9B%86gcc&#43;gdbv1.1/</guid>
      <description>&lt;h1 id=&#34;一前言&#34;&gt;一、前言&lt;/h1&gt;&#xA;&lt;p&gt;　　《&lt;a href=&#34;http://boxcounter.com/2013/11/14/linux%E3%80%81osx%E4%B8%8B%E6%90%AD%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83_v1.1&#34;&gt;linux、osx下搭建操作系统开发环境的完整步骤&lt;/a&gt;》一文中讲解了一些基本的搭建方法，并提供了一个nasm汇编编写的简单的系统内核源码。实际开发过程中更多使用的是C语言，就需要有一个配套的C编译器。因为我使用的可执行文件是elf格式，所以我选择的是GCC。但是osx下安装的GCC生成的是osx的可执行文件格式，并不是elf。所以我需要一个能在osx下生成elf的GCC，俗称的交叉编译器。&lt;br&gt;&#xA;　　我的环境：osx 10.8.4 &amp;amp; 10.9&lt;/p&gt;&#xA;&lt;h1 id=&#34;二安装osx版的gcc&#34;&gt;二、安装osx版的gcc&lt;/h1&gt;&#xA;&lt;pre&gt;&lt;code&gt;brew install gcc48&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;　　推荐下载最新的稳定版gcc。&lt;/p&gt;&#xA;&lt;h1 id=&#34;三配置编译环境&#34;&gt;三、配置编译环境&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;下载gcc源码&lt;br&gt;&#xA;根据[参考资料1][1]的建议，最好使用最新的gcc来进行编译，被编译的源码也推荐使用一样版本的。也就是说，用gcc 4.8.1来编译gcc 4.8.1的源码。&lt;br&gt;&#xA;下载&lt;a href=&#34;http://ftp.gnu.org/gnu/gcc/&#34;&gt;源码包&lt;/a&gt;并解压，得到的目录名称之为「$gcc-4.8.1」。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
